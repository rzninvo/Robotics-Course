// Generated by gencpp from file project1/controller.msg
// DO NOT EDIT!


#ifndef PROJECT1_MESSAGE_CONTROLLER_H
#define PROJECT1_MESSAGE_CONTROLLER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace project1
{
template <class ContainerAllocator>
struct controller_
{
  typedef controller_<ContainerAllocator> Type;

  controller_()
    : clockwise(0)
    , theta(0)  {
    }
  controller_(const ContainerAllocator& _alloc)
    : clockwise(0)
    , theta(0)  {
  (void)_alloc;
    }



   typedef int16_t _clockwise_type;
  _clockwise_type clockwise;

   typedef int16_t _theta_type;
  _theta_type theta;





  typedef boost::shared_ptr< ::project1::controller_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::project1::controller_<ContainerAllocator> const> ConstPtr;

}; // struct controller_

typedef ::project1::controller_<std::allocator<void> > controller;

typedef boost::shared_ptr< ::project1::controller > controllerPtr;
typedef boost::shared_ptr< ::project1::controller const> controllerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::project1::controller_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::project1::controller_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::project1::controller_<ContainerAllocator1> & lhs, const ::project1::controller_<ContainerAllocator2> & rhs)
{
  return lhs.clockwise == rhs.clockwise &&
    lhs.theta == rhs.theta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::project1::controller_<ContainerAllocator1> & lhs, const ::project1::controller_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace project1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::project1::controller_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::project1::controller_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::project1::controller_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::project1::controller_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project1::controller_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project1::controller_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::project1::controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9453778c8293eaf018f21fc4ef7b8843";
  }

  static const char* value(const ::project1::controller_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9453778c8293eaf0ULL;
  static const uint64_t static_value2 = 0x18f21fc4ef7b8843ULL;
};

template<class ContainerAllocator>
struct DataType< ::project1::controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "project1/controller";
  }

  static const char* value(const ::project1::controller_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::project1::controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16    clockwise\n"
"int16    theta\n"
;
  }

  static const char* value(const ::project1::controller_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::project1::controller_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.clockwise);
      stream.next(m.theta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct controller_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::project1::controller_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::project1::controller_<ContainerAllocator>& v)
  {
    s << indent << "clockwise: ";
    Printer<int16_t>::stream(s, indent + "  ", v.clockwise);
    s << indent << "theta: ";
    Printer<int16_t>::stream(s, indent + "  ", v.theta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROJECT1_MESSAGE_CONTROLLER_H
