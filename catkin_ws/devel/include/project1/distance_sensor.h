// Generated by gencpp from file project1/distance_sensor.msg
// DO NOT EDIT!


#ifndef PROJECT1_MESSAGE_DISTANCE_SENSOR_H
#define PROJECT1_MESSAGE_DISTANCE_SENSOR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace project1
{
template <class ContainerAllocator>
struct distance_sensor_
{
  typedef distance_sensor_<ContainerAllocator> Type;

  distance_sensor_()
    : front(0)
    , back(0)
    , right(0)
    , left(0)  {
    }
  distance_sensor_(const ContainerAllocator& _alloc)
    : front(0)
    , back(0)
    , right(0)
    , left(0)  {
  (void)_alloc;
    }



   typedef int16_t _front_type;
  _front_type front;

   typedef int16_t _back_type;
  _back_type back;

   typedef int16_t _right_type;
  _right_type right;

   typedef int16_t _left_type;
  _left_type left;





  typedef boost::shared_ptr< ::project1::distance_sensor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::project1::distance_sensor_<ContainerAllocator> const> ConstPtr;

}; // struct distance_sensor_

typedef ::project1::distance_sensor_<std::allocator<void> > distance_sensor;

typedef boost::shared_ptr< ::project1::distance_sensor > distance_sensorPtr;
typedef boost::shared_ptr< ::project1::distance_sensor const> distance_sensorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::project1::distance_sensor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::project1::distance_sensor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::project1::distance_sensor_<ContainerAllocator1> & lhs, const ::project1::distance_sensor_<ContainerAllocator2> & rhs)
{
  return lhs.front == rhs.front &&
    lhs.back == rhs.back &&
    lhs.right == rhs.right &&
    lhs.left == rhs.left;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::project1::distance_sensor_<ContainerAllocator1> & lhs, const ::project1::distance_sensor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace project1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::project1::distance_sensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::project1::distance_sensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::project1::distance_sensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::project1::distance_sensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project1::distance_sensor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project1::distance_sensor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::project1::distance_sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2969a9d54c2e9d0595d756c5915a9c3c";
  }

  static const char* value(const ::project1::distance_sensor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2969a9d54c2e9d05ULL;
  static const uint64_t static_value2 = 0x95d756c5915a9c3cULL;
};

template<class ContainerAllocator>
struct DataType< ::project1::distance_sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "project1/distance_sensor";
  }

  static const char* value(const ::project1::distance_sensor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::project1::distance_sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16    front\n"
"int16    back\n"
"int16   right\n"
"int16    left\n"
;
  }

  static const char* value(const ::project1::distance_sensor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::project1::distance_sensor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.front);
      stream.next(m.back);
      stream.next(m.right);
      stream.next(m.left);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct distance_sensor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::project1::distance_sensor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::project1::distance_sensor_<ContainerAllocator>& v)
  {
    s << indent << "front: ";
    Printer<int16_t>::stream(s, indent + "  ", v.front);
    s << indent << "back: ";
    Printer<int16_t>::stream(s, indent + "  ", v.back);
    s << indent << "right: ";
    Printer<int16_t>::stream(s, indent + "  ", v.right);
    s << indent << "left: ";
    Printer<int16_t>::stream(s, indent + "  ", v.left);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROJECT1_MESSAGE_DISTANCE_SENSOR_H
