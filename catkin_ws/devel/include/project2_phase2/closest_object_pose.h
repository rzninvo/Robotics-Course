// Generated by gencpp from file project2_phase2/closest_object_pose.msg
// DO NOT EDIT!


#ifndef PROJECT2_PHASE2_MESSAGE_CLOSEST_OBJECT_POSE_H
#define PROJECT2_PHASE2_MESSAGE_CLOSEST_OBJECT_POSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace project2_phase2
{
template <class ContainerAllocator>
struct closest_object_pose_
{
  typedef closest_object_pose_<ContainerAllocator> Type;

  closest_object_pose_()
    : distance(0.0)
    , direction(0.0)  {
    }
  closest_object_pose_(const ContainerAllocator& _alloc)
    : distance(0.0)
    , direction(0.0)  {
  (void)_alloc;
    }



   typedef double _distance_type;
  _distance_type distance;

   typedef double _direction_type;
  _direction_type direction;





  typedef boost::shared_ptr< ::project2_phase2::closest_object_pose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::project2_phase2::closest_object_pose_<ContainerAllocator> const> ConstPtr;

}; // struct closest_object_pose_

typedef ::project2_phase2::closest_object_pose_<std::allocator<void> > closest_object_pose;

typedef boost::shared_ptr< ::project2_phase2::closest_object_pose > closest_object_posePtr;
typedef boost::shared_ptr< ::project2_phase2::closest_object_pose const> closest_object_poseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::project2_phase2::closest_object_pose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::project2_phase2::closest_object_pose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::project2_phase2::closest_object_pose_<ContainerAllocator1> & lhs, const ::project2_phase2::closest_object_pose_<ContainerAllocator2> & rhs)
{
  return lhs.distance == rhs.distance &&
    lhs.direction == rhs.direction;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::project2_phase2::closest_object_pose_<ContainerAllocator1> & lhs, const ::project2_phase2::closest_object_pose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace project2_phase2

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::project2_phase2::closest_object_pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::project2_phase2::closest_object_pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::project2_phase2::closest_object_pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::project2_phase2::closest_object_pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project2_phase2::closest_object_pose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::project2_phase2::closest_object_pose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::project2_phase2::closest_object_pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "408759c287897be1a1b77ecfff03e04a";
  }

  static const char* value(const ::project2_phase2::closest_object_pose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x408759c287897be1ULL;
  static const uint64_t static_value2 = 0xa1b77ecfff03e04aULL;
};

template<class ContainerAllocator>
struct DataType< ::project2_phase2::closest_object_pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "project2_phase2/closest_object_pose";
  }

  static const char* value(const ::project2_phase2::closest_object_pose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::project2_phase2::closest_object_pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 distance\n"
"float64 direction\n"
;
  }

  static const char* value(const ::project2_phase2::closest_object_pose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::project2_phase2::closest_object_pose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distance);
      stream.next(m.direction);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct closest_object_pose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::project2_phase2::closest_object_pose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::project2_phase2::closest_object_pose_<ContainerAllocator>& v)
  {
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "direction: ";
    Printer<double>::stream(s, indent + "  ", v.direction);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROJECT2_PHASE2_MESSAGE_CLOSEST_OBJECT_POSE_H
