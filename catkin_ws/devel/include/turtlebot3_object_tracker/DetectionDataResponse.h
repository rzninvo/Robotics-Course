// Generated by gencpp from file turtlebot3_object_tracker/DetectionDataResponse.msg
// DO NOT EDIT!


#ifndef TURTLEBOT3_OBJECT_TRACKER_MESSAGE_DETECTIONDATARESPONSE_H
#define TURTLEBOT3_OBJECT_TRACKER_MESSAGE_DETECTIONDATARESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace turtlebot3_object_tracker
{
template <class ContainerAllocator>
struct DetectionDataResponse_
{
  typedef DetectionDataResponse_<ContainerAllocator> Type;

  DetectionDataResponse_()
    : bb_cx(0.0)
    , bb_cy(0.0)
    , bb_width(0.0)
    , bb_height(0.0)
    , img_width(0.0)
    , img_height(0.0)
    , flag()  {
    }
  DetectionDataResponse_(const ContainerAllocator& _alloc)
    : bb_cx(0.0)
    , bb_cy(0.0)
    , bb_width(0.0)
    , bb_height(0.0)
    , img_width(0.0)
    , img_height(0.0)
    , flag(_alloc)  {
  (void)_alloc;
    }



   typedef double _bb_cx_type;
  _bb_cx_type bb_cx;

   typedef double _bb_cy_type;
  _bb_cy_type bb_cy;

   typedef double _bb_width_type;
  _bb_width_type bb_width;

   typedef double _bb_height_type;
  _bb_height_type bb_height;

   typedef double _img_width_type;
  _img_width_type img_width;

   typedef double _img_height_type;
  _img_height_type img_height;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _flag_type;
  _flag_type flag;





  typedef boost::shared_ptr< ::turtlebot3_object_tracker::DetectionDataResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::turtlebot3_object_tracker::DetectionDataResponse_<ContainerAllocator> const> ConstPtr;

}; // struct DetectionDataResponse_

typedef ::turtlebot3_object_tracker::DetectionDataResponse_<std::allocator<void> > DetectionDataResponse;

typedef boost::shared_ptr< ::turtlebot3_object_tracker::DetectionDataResponse > DetectionDataResponsePtr;
typedef boost::shared_ptr< ::turtlebot3_object_tracker::DetectionDataResponse const> DetectionDataResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::turtlebot3_object_tracker::DetectionDataResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::turtlebot3_object_tracker::DetectionDataResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::turtlebot3_object_tracker::DetectionDataResponse_<ContainerAllocator1> & lhs, const ::turtlebot3_object_tracker::DetectionDataResponse_<ContainerAllocator2> & rhs)
{
  return lhs.bb_cx == rhs.bb_cx &&
    lhs.bb_cy == rhs.bb_cy &&
    lhs.bb_width == rhs.bb_width &&
    lhs.bb_height == rhs.bb_height &&
    lhs.img_width == rhs.img_width &&
    lhs.img_height == rhs.img_height &&
    lhs.flag == rhs.flag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::turtlebot3_object_tracker::DetectionDataResponse_<ContainerAllocator1> & lhs, const ::turtlebot3_object_tracker::DetectionDataResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace turtlebot3_object_tracker

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::turtlebot3_object_tracker::DetectionDataResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtlebot3_object_tracker::DetectionDataResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtlebot3_object_tracker::DetectionDataResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtlebot3_object_tracker::DetectionDataResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlebot3_object_tracker::DetectionDataResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlebot3_object_tracker::DetectionDataResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::turtlebot3_object_tracker::DetectionDataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "833a774d67a344a240d1abb6209c9f6a";
  }

  static const char* value(const ::turtlebot3_object_tracker::DetectionDataResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x833a774d67a344a2ULL;
  static const uint64_t static_value2 = 0x40d1abb6209c9f6aULL;
};

template<class ContainerAllocator>
struct DataType< ::turtlebot3_object_tracker::DetectionDataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "turtlebot3_object_tracker/DetectionDataResponse";
  }

  static const char* value(const ::turtlebot3_object_tracker::DetectionDataResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::turtlebot3_object_tracker::DetectionDataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 bb_cx\n"
"float64 bb_cy\n"
"float64 bb_width\n"
"float64 bb_height\n"
"float64 img_width\n"
"float64 img_height\n"
"string flag\n"
;
  }

  static const char* value(const ::turtlebot3_object_tracker::DetectionDataResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::turtlebot3_object_tracker::DetectionDataResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bb_cx);
      stream.next(m.bb_cy);
      stream.next(m.bb_width);
      stream.next(m.bb_height);
      stream.next(m.img_width);
      stream.next(m.img_height);
      stream.next(m.flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DetectionDataResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::turtlebot3_object_tracker::DetectionDataResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::turtlebot3_object_tracker::DetectionDataResponse_<ContainerAllocator>& v)
  {
    s << indent << "bb_cx: ";
    Printer<double>::stream(s, indent + "  ", v.bb_cx);
    s << indent << "bb_cy: ";
    Printer<double>::stream(s, indent + "  ", v.bb_cy);
    s << indent << "bb_width: ";
    Printer<double>::stream(s, indent + "  ", v.bb_width);
    s << indent << "bb_height: ";
    Printer<double>::stream(s, indent + "  ", v.bb_height);
    s << indent << "img_width: ";
    Printer<double>::stream(s, indent + "  ", v.img_width);
    s << indent << "img_height: ";
    Printer<double>::stream(s, indent + "  ", v.img_height);
    s << indent << "flag: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TURTLEBOT3_OBJECT_TRACKER_MESSAGE_DETECTIONDATARESPONSE_H
